1
// // take input base, b and a for (b-a)

// int count = 0
// while(b>0){
//         //keep subtracting a from b
//         b = anyBaseSubtraction(b,a, base);
//         //keep increasing count count
//         count = anyBaseAdd(count,1, base);
/1 }

2
          Java.utul.*;
public class Main {
      public static void main(String args[])


            Scanner scn = new Scanner(Systen. in);
            int a = scn.nextInt();
            int b = scn.nextint();
            int base = scn.nextInt();

            int count = 6;           // keeps count in base
            int testCounter=6; // keeps count in decinal|

            while(b>6){
                  // b-a
                  b = anyBaseSub(a, b, base);
                  // count++
                  count = anyBaseAdd(count,1, base);
                  testCounter++;



          Systen.out_println(count);
          Systen.out_println(testCounteri

3
public static int anyBaseSub(int a, int b, int base){
      int answer = 0;
      int power = 1;
      int carry = 6;

      while(b!=8){

             int sum = (b%10)-(a%10)-carry;

             if(sun >= @)

             | carry = 6;
             else{
                    carry = 1;
                    sum += base;


             answer sun*power

             b/=10;
             a/=10;
             power*=16;t=
      }

      return answer;

4
public static int anyBaseAdd(int a, int b, int base)

      1f(a-8)              // initially ais @
            return b;

      int answer = 6;
      int power = 1;
      int carry = 6;

      while(a!=8){

            int sum = (b¥16)+(a%10}+carry;

            1f(sun « base)

            | carry = 6;
            else{
                  carry = 1;
                  sum = base;


            answer




            power*=16-


      // if carry remains after processing
      Lf(carry>8)
            answer 4= Carry*power;

      return answer;

